2023-02-05 20:10:16,497 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 20:10:16,498 - mmcls - INFO - Distributed training: False
2023-02-05 20:10:16,597 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower/train.txt',
        classes='data/flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower/val',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0bel/run/mmclassification/mmclassification-master/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 20:10:16,629 - mmcls - INFO - Set random seed to 751759164, deterministic: False
2023-02-05 20:10:16,914 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 20:10:17,092 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 20:10:33,155 - mmcls - INFO - load checkpoint from local path: /HOME/scz0bel/run/mmclassification/mmclassification-master/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 20:10:33,280 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 20:10:33,280 - mmcls - INFO - Start running, host: scz0bel@g0099, work_dir: /data/run01/scz0bel/mmclassification/mmclassification-master/work/resnet18_b32_flower
2023-02-05 20:10:33,281 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 20:10:33,281 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 20:10:33,281 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0bel/mmclassification/mmclassification-master/work/resnet18_b32_flower by HardDiskBackend.
2023-02-05 20:10:51,809 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 20:10:54,202 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 20:10:59,638 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 20:11:00,597 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-05 20:11:05,970 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 20:11:06,917 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 20:11:12,280 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 20:11:13,235 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 20:11:18,619 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 20:11:19,581 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 20:11:24,948 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 20:11:25,924 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 20:11:31,304 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 20:11:32,277 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 20:11:37,660 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 20:11:38,624 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 20:11:44,055 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 20:11:45,020 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 20:11:50,395 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 20:11:51,355 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:11:56,751 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 20:11:57,707 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:12:03,081 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 20:12:04,026 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:12:09,395 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 20:12:10,350 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 20:12:15,768 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 20:12:16,729 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:12:22,102 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 20:12:23,061 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:12:28,418 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 20:12:29,367 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:12:34,749 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 20:12:35,696 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:12:41,052 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 20:12:42,019 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:12:47,488 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 20:12:48,441 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:12:53,817 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 20:12:54,772 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:13:00,145 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 20:13:01,095 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:13:06,502 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 20:13:07,452 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:13:12,892 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 20:13:13,855 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 20:13:19,206 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 20:13:20,149 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:13:25,553 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 20:13:26,502 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:13:31,877 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 20:13:32,826 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:13:38,291 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 20:13:39,236 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:13:44,625 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 20:13:45,571 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 20:13:50,914 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 20:13:51,867 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:13:57,293 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 20:13:58,240 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:14:03,604 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 20:14:04,553 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:14:09,946 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 20:14:10,902 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:14:16,261 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 20:14:17,212 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:14:22,569 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 20:14:23,852 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:14:29,257 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 20:14:30,209 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:14:35,583 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 20:14:36,537 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:14:41,945 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 20:14:42,894 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:14:48,261 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 20:14:49,212 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:14:54,673 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 20:14:55,625 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:15:00,975 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 20:15:01,922 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:15:07,292 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 20:15:08,250 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:15:13,616 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 20:15:14,560 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 20:15:19,926 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 20:15:20,879 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:15:26,237 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 20:15:27,183 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:15:32,585 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 20:15:33,545 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:15:38,902 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 20:15:39,851 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:15:45,215 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 20:15:46,166 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:15:51,568 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 20:15:52,520 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 20:15:57,872 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 20:15:58,826 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:16:04,224 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 20:16:05,178 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:16:10,538 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 20:16:11,492 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:16:16,897 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 20:16:17,855 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 20:16:23,224 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 20:16:24,177 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:16:29,592 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 20:16:30,553 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:16:35,939 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 20:16:36,898 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:16:42,342 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 20:16:43,306 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:16:48,718 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 20:16:49,674 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:16:55,044 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 20:16:56,004 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:17:01,372 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 20:17:02,317 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:17:07,703 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 20:17:08,653 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:17:14,040 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 20:17:14,991 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:17:20,383 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 20:17:21,346 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:17:26,728 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 20:17:27,674 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:17:33,069 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 20:17:34,019 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:17:39,408 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 20:17:40,362 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:17:45,762 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 20:17:46,716 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 20:17:52,157 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 20:17:53,117 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:17:58,549 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 20:17:59,504 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:18:04,880 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 20:18:05,833 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 20:18:11,216 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 20:18:12,167 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:18:17,549 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 20:18:18,508 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:18:23,932 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 20:18:24,887 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 20:18:30,287 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 20:18:31,244 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:18:36,687 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 20:18:37,641 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 20:18:43,027 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 20:18:43,984 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:18:49,410 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 20:18:50,370 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:18:55,762 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 20:18:56,720 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:19:02,089 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 20:19:03,045 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 20:19:08,429 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 20:19:09,378 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:19:14,756 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 20:19:15,704 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 20:19:21,133 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 20:19:22,083 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:19:27,484 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 20:19:28,435 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:19:33,828 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 20:19:34,785 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:19:40,165 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 20:19:41,119 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:19:46,516 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 20:19:47,480 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 20:19:52,896 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 20:19:53,859 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 20:19:59,238 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 20:20:00,191 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:20:05,580 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 20:20:06,531 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 20:20:12,028 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 20:20:12,979 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:20:18,421 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 20:20:19,394 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 20:20:24,766 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 20:20:25,730 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 20:20:31,098 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 20:20:32,057 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 20:20:37,478 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 20:20:38,427 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 20:20:43,795 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 20:20:44,754 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:20:50,167 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 20:20:51,127 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 20:20:56,498 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 20:20:57,446 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 20:21:02,901 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 20:21:03,859 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:21:09,236 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 20:21:10,191 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:21:15,577 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 20:21:16,533 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 20:21:21,942 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 20:21:22,906 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
